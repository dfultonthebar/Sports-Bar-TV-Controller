

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id        String   @id @default(cuid())
  name      String
  type      String
  brand     String?
  model     String?
  location  String?
  status    String   @default("active")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  content      String?  // Extracted text content for AI processing
  embeddings   String?  // JSON string of embeddings for vector search
  uploadedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String   // e.g., "Grok", "Claude", "OpenAI"
  provider    String   // e.g., "xai", "anthropic", "openai"
  keyValue    String   // encrypted API key
  isActive    Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatSession {
  id        String   @id @default(cuid())
  title     String?
  messages  String   // JSON string of messages
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatrixConfiguration {
  id               String   @id @default(cuid())
  name             String   // Configuration name
  ipAddress        String
  port             Int      @default(4999)
  tcpPort          Int      @default(5000)
  udpPort          Int      @default(4000)
  protocol         String   @default("TCP")
  connectionStatus String   @default("disconnected") // connected, disconnected, error
  lastTested       DateTime?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  inputs   MatrixInput[]
  outputs  MatrixOutput[]
}

model MatrixInput {
  id           String   @id @default(cuid())
  configId     String
  channelNumber Int     // 1-32 typically
  label        String   // User-defined label like "Cable Box 1"
  inputType    String   @default("HDMI") // HDMI, Component, Composite, etc.
  status       String   @default("active") // active, unused, no, na
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  configuration MatrixConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  @@unique([configId, channelNumber])
}

model MatrixOutput {
  id            String   @id @default(cuid())
  configId      String
  channelNumber Int      // 1-32 typically
  label         String   // User-defined label like "Main Bar TV"
  resolution    String   @default("1080p") // 1080p, 4K, 720p, etc.
  status        String   @default("active") // active, unused, no, na
  audioOutput   String?  // Matrix Audio 1-4 for routing to Atlas system
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  configuration MatrixConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  @@unique([configId, channelNumber])
}

model MatrixRoute {
  id        Int      @id @default(autoincrement())
  inputNum  Int
  outputNum Int
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model MatrixScene {
  id          Int      @id @default(autoincrement())
  sceneNum    Int
  name        String
  description String?
  routes      String   // JSON string of routes
  createdAt   DateTime @default(now())
}

model AudioProcessor {
  id          String      @id @default(cuid())
  name        String
  model       String      // "AZM4", "AZM8", "AZMP4", "AZMP8", etc.
  ipAddress   String
  port        Int         @default(80)
  zones       Int         @default(4)
  description String?
  status      String      @default("offline") // "online", "offline", "error"
  lastSeen    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  audioZones      AudioZone[]
  audioScenes     AudioScene[]
  audioMessages   AudioMessage[]
  inputMeters     AudioInputMeter[]

  @@unique([ipAddress, port])
}

model AudioZone {
  id            String         @id @default(cuid())
  processorId   String
  zoneNumber    Int
  name          String
  description   String?
  currentSource String?
  volume        Int            @default(50)
  muted         Boolean        @default(false)
  enabled       Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  processor     AudioProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@unique([processorId, zoneNumber])
}

model AudioScene {
  id          String         @id @default(cuid())
  processorId String
  sceneNumber Int
  name        String
  description String?
  settings    String         // JSON string containing zone settings
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  processor   AudioProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@unique([processorId, sceneNumber])
}

model AudioMessage {
  id          String         @id @default(cuid())
  processorId String
  messageId   Int
  name        String
  filename    String?
  duration    Int?           // seconds
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  processor   AudioProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@unique([processorId, messageId])
}

model AudioInputMeter {
  id            String         @id @default(cuid())
  processorId   String
  inputNumber   Int            // 0-based index for SourceMeter_X
  parameterName String         // e.g., "SourceMeter_0"
  inputName     String?        // User-friendly name like "Live Band Input"
  currentLevel  Float?         // Current level in dB (-80 to 0)
  peakLevel     Float?         // Peak level in dB
  levelPercent  Int?           // Level as percentage (0-100)
  isActive      Boolean        @default(true)
  lastUpdate    DateTime?      // Last time level was updated
  warningThreshold Float       @default(-12.0)  // Yellow warning at -12dB
  dangerThreshold  Float       @default(-3.0)   // Red danger at -3dB
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  processor     AudioProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@unique([processorId, inputNumber])
}
