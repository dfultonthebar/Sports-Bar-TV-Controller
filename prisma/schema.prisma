generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AudioInputMeter {
  id             String         @id
  processorId    String
  inputNumber    Int
  inputName      String
  level          Float          @default(0)
  peak           Float          @default(0)
  clipping       Boolean        @default(false)
  timestamp      DateTime       @default(now())
  AudioProcessor AudioProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@unique([processorId, inputNumber])
  @@index([processorId, timestamp])
}

model AudioMessage {
  id             String         @id
  processorId    String
  name           String
  audioFile      String
  duration       Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  AudioProcessor AudioProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)
}

model AudioProcessor {
  id              String            @id
  name            String
  model           String
  ipAddress       String
  port            Int               @default(80)
  username        String?
  password        String?
  zones           Int               @default(4)
  description     String?
  status          String            @default("offline")
  lastSeen        DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  AudioInputMeter AudioInputMeter[]
  AudioMessage    AudioMessage[]
  AudioScene      AudioScene[]
  AudioZone       AudioZone[]

  @@unique([ipAddress, port])
}

model AudioScene {
  id             String         @id
  processorId    String
  name           String
  description    String?
  sceneData      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  AudioProcessor AudioProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)
}

model AudioZone {
  id             String         @id
  processorId    String
  zoneNumber     Int
  name           String
  description    String?
  currentSource  String?
  volume         Int            @default(50)
  muted          Boolean        @default(false)
  enabled        Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  AudioProcessor AudioProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@unique([processorId, zoneNumber])
}

model BartenderRemote {
  id          String    @id
  name        String
  ipAddress   String    @unique
  port        Int       @default(80)
  description String?
  status      String    @default("offline")
  lastSeen    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
}

model DeviceMapping {
  id             String   @id
  tvNumber       Int      @unique
  fireTvDeviceId String?
  fireTvName     String?
  audioZoneId    String?
  audioZoneName  String?
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
}

model FireTVDevice {
  id         String     @id
  name       String
  ipAddress  String     @unique
  macAddress String?
  location   String?
  status     String     @default("offline")
  lastSeen   DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  Schedule   Schedule[]
}

model HomeTeam {
  id             String   @id
  name           String   @unique
  sport          String
  league         String?
  logoUrl        String?
  primaryColor   String?
  secondaryColor String?
  enabled        Boolean  @default(true)
  priority       Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
}

model MatrixConfig {
  id          String   @id
  name        String
  description String?
  config      String
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Schedule {
  id            String        @id
  name          String
  deviceId      String
  channelName   String
  channelNumber String?
  startTime     DateTime
  endTime       DateTime?
  recurring     Boolean       @default(false)
  daysOfWeek    String?
  enabled       Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  FireTVDevice  FireTVDevice  @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  ScheduleLog   ScheduleLog[]
}

model ScheduleLog {
  id          String   @id
  scheduleId  String
  executedAt  DateTime @default(now())
  success     Boolean
  error       String?
  channelName String
  deviceName  String
  Schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model SystemSettings {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime
}

model TVLayout {
  id          String   @id
  name        String
  description String?
  layoutData  String
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model MatrixConfiguration {
  id                String         @id @default(cuid())
  name              String
  ipAddress         String
  port              Int            @default(4999)
  tcpPort           Int            @default(5000)
  udpPort           Int            @default(4000)
  protocol          String         @default("TCP")
  connectionStatus  String         @default("disconnected")
  lastTested        DateTime?
  isActive          Boolean        @default(true)
  cecInputChannel   Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  inputs            MatrixInput[]
  outputs           MatrixOutput[]
  routes            MatrixRoute[]
  scenes            MatrixScene[]
}

model MatrixInput {
  id            String              @id @default(cuid())
  configId      String
  channelNumber Int
  label         String
  inputType     String              @default("HDMI")
  deviceType    String              @default("Other")
  status        String              @default("active")
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  config        MatrixConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  @@unique([configId, channelNumber])
}

model MatrixOutput {
  id            String              @id @default(cuid())
  configId      String
  channelNumber Int
  label         String
  resolution    String              @default("1080p")
  status        String              @default("active")
  audioOutput   String?
  tvBrand       String?
  tvModel       String?
  cecAddress    String?
  lastDiscovery DateTime?
  isActive      Boolean             @default(true)
  dailyTurnOn   Boolean             @default(false)
  dailyTurnOff  Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  config        MatrixConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  @@unique([configId, channelNumber])
}

model MatrixRoute {
  id            String              @id @default(cuid())
  configId      String
  inputChannel  Int
  outputChannel Int
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  config        MatrixConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  @@unique([configId, inputChannel, outputChannel])
}

model MatrixScene {
  id          String              @id @default(cuid())
  configId    String
  name        String
  description String?
  routes      String              // JSON array of routes
  isActive    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  config      MatrixConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
}
